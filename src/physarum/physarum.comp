#version 430

layout (local_size_x = 32, local_size_y = 32) in;

float speed = 0.1;

struct Tracer {
    float x;
    float y;
    float angle;
};

layout (set = 0, binding = 0) readonly uniform Size { 
    uint h;
    uint w;
} size;

layout (set = 0, binding = 1) buffer State {
    Tracer v[];
} state;

layout (set = 0, binding = 2) buffer ImageO {
    uint v[];
 } image_output;


void main() {
    // UPDATE 
    uint i = gl_GlobalInvocationID.x;
    Tracer t = state.v[i];
    t.x += sin(t.angle) * speed;
    t.y += cos(t.angle) * speed;

    if (t.x >= size.w - 1 || t.x < 0) {
        t.angle = 2. * 3.14 - t.angle;
        t.x += sin(t.angle) * speed;
    }
    if (t.y >= size.h - 1 || t.y < 0) {
        t.angle = 3.14 - t.angle;
        t.y += cos(t.angle) * speed;
    }

    state.v[i] = t;

    image_output.v[size.h * uint(t.x) + uint(t.y)] = 0xffffffff;   
}
