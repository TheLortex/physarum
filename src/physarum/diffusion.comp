#version 430

layout (local_size_x = 32, local_size_y = 32) in;

layout (set = 0, binding = 0) readonly uniform Size { 
    uint h;
    uint w;
} size;

layout (set = 0, binding = 1) readonly buffer ImageI {
    float v[];
 } image_input;

layout (set = 0, binding = 2) writeonly buffer ImageO {
    float v[];
 } image_output;

layout (set = 0, binding = 3) writeonly buffer Render {
    uint v[];
 } render;


void main() {
    // diffusion 
    uint x = gl_GlobalInvocationID.x;
    uint y = gl_GlobalInvocationID.y;
    

    float t = 0;

    t += image_input.v[size.h * (x - 1) + y - 1] + image_input.v[size.h * x + y - 1] + image_input.v[size.h * (x + 1) + y - 1];
    t += image_input.v[size.h * (x - 1) + y    ] +                                     image_input.v[size.h * (x + 1) + y    ];
    t += image_input.v[size.h * (x - 1) + y + 1] + image_input.v[size.h * x + y + 1] + image_input.v[size.h * (x + 1) + y + 1];

    float v = image_input.v[size.h * x + y] * 0.945 + t * 0.05 / 8.;



    image_output.v[size.h * x + y] = v;

    uint u = uint(v * 256.);

    render.v[size.h * x + y] = 255 * 256 * 256 * 256 + u * 256 * 256 + u * 256 + u;
}
