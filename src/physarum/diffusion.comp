#version 430

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0) readonly buffer ImageI {
    float v[];
 } image_input;

layout (set = 0, binding = 1) buffer ImageO {
    float v[];
 } image_output;

layout (set = 0, binding = 2) buffer Render {
    uint v[];
 } render;

layout (set = 0, binding = 3) readonly buffer ImageIH {
    float v[];
 } image_input_hue;

layout (push_constant) uniform Settings
{
    float speed;
    float sensor_angle;
    float sensor_distance;
    uint sensor_size;
    float rotation_speed;
    float decay_ratio;
    float diffusion_ratio;
    float entropy;
    uint width;
    uint height;
    uint time;
} constants;


void main() {
    // diffusion 
    uint x = gl_GlobalInvocationID.x;
    uint y = gl_GlobalInvocationID.y;
    

    float t = 0;
    float hue = image_input_hue.v[constants.height * x + y];

    t += image_input.v[constants.height * (x - 1) + y - 1] + image_input.v[constants.height * x + y - 1] + image_input.v[constants.height * (x + 1) + y - 1];
    t += image_input.v[constants.height * (x - 1) + y    ] +                                     image_input.v[constants.height * (x + 1) + y    ];
    t += image_input.v[constants.height * (x - 1) + y + 1] + image_input.v[constants.height * x + y + 1] + image_input.v[constants.height * (x + 1) + y + 1];

    float v = (image_input.v[constants.height * x + y] * (1 - constants.diffusion_ratio) + t * constants.diffusion_ratio / 8.) * (1 - constants.decay_ratio);

    image_output.v[constants.height * x + y] = v;


    // HSV TO RGB
    vec3 c = vec3(hue, 0.7, v * 0.9);
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    vec3 rgb = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);

    uint b = uint(rgb.x * 256.);
    uint g = uint(rgb.y * 256.);
    uint r = uint(rgb.z * 256.);

    render.v[constants.height * x + y] = 255 * 256 * 256 * 256 + r * 256 * 256 + g * 256 + b;
}
